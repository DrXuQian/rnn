rnn-learn  - an implementation of a gradient-based learning algorithm for recurrent neural networks focusing on the problem of time-series prediction and generation.


rnn-learn is called with the following parameters:

    rnn-learn [-s seed] [-n neurons] [-t time-constant] [-d feedback-delay] [-k output-type] [-e epochs] [-l log-interval] [-x learning-rate] [-m momentum] [-a] [-p prior-strength] [-i input-file] [-o output-file] [-c config-file] [-V] [target-file ...]
    rnn-learn [-v] [-h]

Available options are:

-s seed
    `seed' is the seed for the initialization of random number generator, which specifies a starting point for the random number sequence, and provides for restarting at the same point. Default is 1.

-n neurons
    Number of context neurons in recurrent a neural network. Default is 10.

-t time-constant
    Time constant for each neuron primarily determines the time scale of the activation dynamics of the neuron. Default is 5.

-d feedback-delay
    Time delay in a self-feedback from output to input. This parameter also means that a model learns to predict future values of the time series from past values with the delay interval. Default is 1.

-k output-type
    Type of output function
        0: tanh (Default)
        1: softmax activation function

-e epochs
    Number of the training iterations to optimize model parameters. Default is 1000.

-l log-interval
    `log-interval' is the learning step between data samples being logged. Default is 100.

-x learning-rate
    Learning rate for the gradient-descent method. Default is 0.001.

-m momentum
    Learning momentum for the gradient-descent method. Default is 0.95.

-a
    Use an algorithm to update the learning rate adaptively with respect to the error.

-p prior-strength
    Effect of the normal prior distribution over the parameter space. Default is 0. (Note: setting `prior-strength' <= 0.001 is recommended.)

-i input-file
    The input file `input-file' being generated by rnn-learn is used for the initialization of model parameters. If there are no target-files named on the command line, rnn-learn restarts training at the end of previous trial. Otherwise rnn-learn resets training examples by means of the files.

-o output-file
    The optimized model parameters are written to `output-file'. Default is `rnn.dat'.

-c config-file
    The configuration file `config-file' is read.

-V
    Verbose.

-v
    Prints the version information and exit.

-h
    Prints this help and exit.


Program execution:

rnn-learn first reads parameters from the command line, or from a configuration file. Next, rnn-learn proceeds to read each target-file which contains training examples. If there are no target-files named on the command line, rnn-learn reads the standard input. After all the input from target-files is exhausted, rnn-learn executes training iterations.


Target-file format which rnn-learn can recognize:

In a target-file, the data columns are separated by a tab or comma. The number of data columns means the dimension of time series of training examples. Comments begin at a sign "#" and continue to the end of the line. If data are separated by a blank line, each data block is recognized as a different time series.

