Recurrent neural network package for problems of time-series prediction and generation

Copyright (c) 2009-2011, Jun Namikawa <jnamika@gmail.com>
License: ISC license (BSD license: mt19937ar.c)

This package implements a gradient-based learning algorithm for recurrent neural networks.
The package supports
(1) both fully connected and sparsely connected networks,
(2) both discrete-time neural networks and continuous-time neural networks,
(3) training examples of both symbolic data and floating point numbers,
(4) multi-threading, and
(5) analyzing some characteristics (ex: Lyapunov spectrum, Kullback-Leibler divergence).



=== Installation ===

Type `make' to build the `rnn-learn' and `rnn-generate' programs.
Run them with the argument `-h' to show the usages of them.

There are some other useful programs in this package.



=== rnn-learn' usage === 

Usage: rnn-learn [-s seed] [-n neurons] [-t time-constant] [-d feedback-delay] [-k output-type] [-e epochs] [-l log-interval] [-x learning-rate] [-m momentum] [-a] [-p prior-strength] [-i input-file] [-o output-file] [-c config-file] [-V] [target-file ...]
Usage: rnn-learn [-v] [-h]

Available options are:
-s seed
    `seed' is the seed for the initialization of random number generator, which specifies a starting point for the random number sequence, and provides for restarting at the same point. If this option is omitted, the current system time is used.
-n neurons
    Number of context neurons in recurrent a neural network. Default is 10.
-t time-constant
    Time constant for each neuron primarily determines the time scale of the activation dynamics of the neuron. Default is 5.
-d feedback-delay
    Time delay in a self-feedback from output to input. This parameter also means that a model learns to predict future values of the time series from past values with the delay interval. Default is 1.
-k output-type
    Type of output function
        0: tanh (Default)
        1: softmax activation function
-e epochs
    Number of the training iterations to optimize model parameters. Default is 1000.
-l log-interval
    `log-interval' is the learning step between data samples being logged. Default is 100.
-x learning-rate
    Learning rate for the gradient-descent method. Default is 0.001.
-m momentum
    Learning momentum for the gradient-descent method. Default is 0.95.
-a
    Use an algorithm to update the learning rate adaptively with respect to the error.
-p prior-strength
    Effect of the normal prior distribution over the parameter space. Default is 0. (Note: setting `prior-strength' <= 0.001 is recommended.)
-i input-file
    The input file `input-file' being generated by rnn-learn is used for the initialization of model parameters. If there are no target-files named on the command line, rnn-learn restarts training at the end of previous trial. Otherwise rnn-learn resets training examples by means of the files.
-o output-file
    The optimized model parameters are written to `output-file'. Default is `rnn.dat'.
-c config-file
    The configuration file `config-file' is read.
-V
    Verbose.
-v
    Prints the version information and exit.
-h
    Prints this help and exit.

Program execution:
rnn-learn first reads parameters from the command line, or from a configuration file. Next, rnn-learn proceeds to read each target-file which contains training examples. If there are no target-files named on the command line, rnn-learn reads the standard input. After all the input from target-files is exhausted, rnn-learn executes training iterations.

Target-file format which rnn-learn can recognize:
In a target-file, the data columns are separated by a tab or comma. The number of data columns means the dimension of time series of training examples. Comments begin at a sign "#" and continue to the end of the line. If data are separated by a blank line, each data block is recognized as a different time series.



=== rnn-generate' usage === 

Usage: rnn-generate [-s seed] [-n steps] [-i index] rnn-file
Usage: rnn-generate [-v] [-h]

Available options are:
-s seed
    `seed' is the seed for the initialization of random number generator, which specifies a starting point for the random number sequence, and provides for restarting at the same point. If this option is omitted, the current system time is used.
-n steps
    Number of steps to generate output of a network. Default is 1000.
-i index
    Index of an initial state corresponding to a training example. Default is -1 (use a random initial state).
-v
    Prints the version information and exit.
-h
    Prints this help and exit.

Program execution:
First, rnn-generate reads the rnn-file (ex: rnn.dat) generated by rnn-learn in order to setup model parameters. Next, it displays output of a network up to given steps with respect to the initial state corresponding to given index.


